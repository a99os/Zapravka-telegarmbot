import { Composer, Markup } from "telegraf";
import { getLang } from "../libs/lang.js";
import { bot } from "../main.js";
import { User } from "../models/user.model.js";

const composer = new Composer();
composer.hears("üÜï –ó–∞–ø—Ä–∞–≤–∫–∞ –∫—û—à–∏—à", async (ctx) => {
  const user_id = ctx.from.id;
  await User.findOne({ where: { user_id: `${user_id}` } }).then(
    async (user) => {
      if (!user) {
        await ctx.reply(`Botga "/start" tugmasi orqali qayta kiring`);
      } else {
        if (
          user.dataValues.phone_number == "" ||
          user.dataValues.phone_number == null
        ) {
          await ctx.reply(
            `Iltimos, <b>"Telefon raqamni yuborish"</b> tugmasini bosing! üëá`,
            {
              parse_mode: "HTML",
              ...Markup.keyboard([
                [
                  Markup.button.contactRequest("üìû Telefon raqamni yuborish"),
                  "üè† Bosh sahifa",
                ],
              ])
                .oneTime()
                .resize(),
            }
          );
        } else {
        }
      }
    }
  );
});
composer.hears("üÜï –î–æ–±–∞–≤–∏—Ç—å –ó–∞–ø—Ä–∞–≤–∫—É", async (ctx) => {
  const user_id = ctx.from.id;
  await User.findOne({ where: { user_id: `${user_id}` } }).then(
    async (user) => {
      if (!user) {
        await ctx.reply(`–ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–æ–π—Ç–∏ –≤ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "/start"`);
      } else {
        if (
          user.dataValues.phone_number == "" ||
          user.dataValues.phone_number == null
        ) {
          await ctx.reply(
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ <b>"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"</b>! üëá`,
            {
              parse_mode: "HTML",
              ...Markup.keyboard([
                [
                  Markup.button.contactRequest("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
                  "üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                ],
              ])
                .oneTime()
                .resize(),
            }
          );
        } else {
        }
      }
    }
  );
});

bot.use(composer.middleware());
